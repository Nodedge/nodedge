# -*- coding: utf-8 -*-

from ${library} import ${function}

from nodedge.blocks.block import Block, EvaluationError
from nodedge.blocks.block_config import BLOCKS_ICONS_PATH, ${op_block_string}, registerNode


@registerNode(${op_block_string})
class ${block_name}Block(Block):
    icon = f"{BLOCKS_ICONS_PATH}/${operation_name}.png"
    operationCode = OP_NODE_ADD
    operationTitle = "${block_name}"
    contentLabel = "${operation_symbol}"
    contentLabelObjectName = "BlockBackground"
    evalString = "${operation_name}"

    def evalImplementation(self):
        inputs = []
        for i in range(len(self.inputSockets)):
            inputs.append(self.inputNodeAt(i))

        try:
            operation = f"{AddBlock.evalString}("
            for curr_input in inputs:
                operation += f"{curr_input.eval()},"
            operation = operation[:-1] + f")"
            result = eval(operation)
        except TypeError as e:
            raise EvaluationError(e)

        self.value = result

        return self.value
